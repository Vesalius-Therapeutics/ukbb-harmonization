#####################################################################
# Setup
# @author: Jeffery Painter
# @modified: 2020-Aug-24
#####################################################################
#
# Note: ${project.basedir} will be replaced with the directory
# in which you start the program.  If you check the project
# out from gitlab, you will find a structure such as
#  $home/ukbb
#
#  Compile by running in the $home/ukbb directory the maven command:
#
#    cd ~/ukbb/
#    mvn clean compile assembly:single
#
#  Then, your jar file will be in:
#    $home/ukbb/target/ukbb-0.0.1-SNAPSHOT-jar-with-dependencies.jar
#
#  We would then expect ${project.basedir}/conf to map to:
#     $home/ukbb/conf/
#
#####################################################################
# Directories and data files
#####################################################################
# Configuration files
CONFIG_DIR=/ukbb-harmonization/clin_db_harmonization/java/ukbb/conf/
#
# Where the UKBB source data is located
DATA_DIR=/ukbb-harmonization/clin_db_harmonization/java/ukbb/data/
#
# Where to construct CSV and or schema files
OUTPUT_DIR=/ukbb-harmonization/clin_db_harmonization/temp/output
#
# Patient input
PATIENT_IN_FILE=ukb669689.csv


#####################################################################
# Output files
#####################################################################
#
# Note: The schema file also contains all of the data dictionary
# insert statements. This takes a while to load, and it should
# only be done once upon the creation of the database.
#
SCHEMA_FILE=ukbb-schema.sql
#
# Note: This file is only created if you DO NOT
# generate CSV output. The program will instead add 
# all the INSERT sql statements into this one file.
#
PATIENT_OUT_FILE=add_patient_data.sql
#
#
#####################################################################
# Output options
#####################################################################
#
# Generate a new schema and data dictionary? This only needs to be done once per
# instance and then the new schema loaded into the database
#
CREATE_SCHEMA=true
#
# If you want to process patient data into tables or SQL insert statements
#
CREATE_DATA=true
#
# SQL or CSV output - delimiter is only used if CSV output is specified
#
CSV_OUTPUT=true
CSV_DELIMITER=","
#
# If using CSV output, do you want it gzip compressed?
#
COMPRESS_OUTPUT=false
#
#
# Should we use the PostgreSQL sequences to generate
# unique keys in each of our tables?
#
GENERATE_SEQUENCE=false
#
#
# If we want to rebuild a subset of tables, provide that option
# here... in case something went wrong in the original
# process, we can just select a small number of tables to construct
REBUILD_TABLES=false
#
#
#
#####################################################################
## Configuration files
#####################################################################
#
# These files define our categories and data types
#
CAT_FILE=ukbb_categories.html
DATA_DICTIONARY_FILE=data_dictionary.html
DATA_ENCODING_FILE=data_types.html
#
# This represents ALL possible UKBB fields
# downloaded from the Data showcase. It does not
# necessarily mean our export has all of these fields
#
FIELD_FILE=field.txt
#
# These are fields we want to ignore. They don't contain
# any useful data elements. Look in the file for more info
#
IGNORE_FIELD_FILE=ignore_fields.txt
#
# At times, we may be notified by UKBB that a patient
# has revoked their consent.  We will store those
# eid numbers in this file and skip them when
# generating our data tables.
#
IGNORE_PATIENT_FILE=ignore_patients.txt
#
# We have categorized certain tables as having multiple choice,
# row repeats or column repeats, etc. These are defined here
TABLE_TYPES=table_settings.txt
#
# If the flag above REBUILD_TABLES is set to True
# then our code will only try to reconstruct the
# set of tables defined in this file.
#
REBUILD_TABLE_TYPES=rebuild_tables.txt
#
# Reserve words that if found in our data dictionary need to
# be modified since they would break construction of tables
# in a database
#
RESERVE_WORD_FILE=pgsql_reserved_words.txt
#
#
#
#####################################################################
## AWS Configuration
#####################################################################
## One of the outputs generated by this code is the file
##
##         output/ukbb_copy_csv_to_tables.sql
##
## The purpose of this file is to make it easy to import the
## generated CSV files into your PostgreSQL database.
##
## Here, we allow the user to specify if this will be a local database
## or if they are going to use AWS, to provide the copy code to 
## import the CSV files into tables from an S3 bucket
##
#####################################################################
# False means use AWS S3 copy
#
# Notes to self: if you want to build local, you should disable
# compression.  The default PostgreSQL database does not support
# compression copy the way AWS S3 loading does.
#
LOCAL_DATABASE=false
AWS_DB_NAME=ukbb
AWS_KEY=AccessKeyId
AWS_SECRET=SecretAccessKey
AWS_TOKEN=SessionToken
#
#
# Example of where the file from this instance will be uploaded
#
# note: we are NOT uploading the CSV files from this program
#       that should be handled by an external process. This 
#       is just a convenience to automate building the copy SQL
#
#       You should specify a unique AWS_S3_PATH per ukbb parser instance
#       so there is no collision when uploading files.
#
AWS_S3_BUCKET=S3BasketBucketName
AWS_S3_PATH=
AWS_REGION=AwsRegion


